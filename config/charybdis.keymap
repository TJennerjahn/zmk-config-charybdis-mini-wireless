#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define U_TAPPING_TERM 200


#define L0 0
#define L1 1
#define L2 2
#define L3 3
#define L4 4


#define AU(keycode) &au LA(keycode) keycode  // Autoumlauts Macro 

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

&mt {
	flavor = "tap-preferred";
	tapping_term_ms = <200>;
	quick_tap_ms = <125>;
};

/ {
    
    macros {
        excl_eq: excl_eq {
            label = "EXCL_EQ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
        };

    };
    combos {
        compatible = "zmk,combos";

        escape_key {
            timeout-ms = <20>;
            key-positions = <15 16>;
            bindings = <&kp ESC>;
        };

        tab_key {
            timeout-ms = <20>;
            key-positions = <20 21>;
            bindings = <&kp TAB>;
        };

        lock_screen {
            timeout-ms = <20>;
            key-positions = <27 28>;
            bindings = <&kp LC(LG(Q))>;
            layers = <0>;
        };
    };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

		lm: layer_mod {
			label = "LAYER_MOD";
			compatible = "zmk,behavior-hold-tap";
			flavor = "hold-preferred";
			tapping_term_ms = <200>;
            #binding-cells = <2>;
			bindings = <&kp>,<&to>;
		};

        td_grave: tap_dance_grave {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_GRAVE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp GRAVE>,
                <&kp TILDE>;
        };

        td_bkt: tap_dance_bkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BKT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LBKT>,
                <&kp RBKT>;
        };

        td_par: tap_dance_par {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PAR";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LPAR>,
                <&kp RPAR>;
        };

        td_brc: tap_dance_brc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BRC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LBRC>,
                <&kp RBRC>;
        };

        td_qt: tap_dance_qt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_QT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp SQT>,
                <&kp DQT>;
        };

        td_excl: tap_dance_excl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EXCL";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp EXCL>,
                <&excl_eq>;
        };

        td_dot: td_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DOT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp DOT>,
                <&kp COMMA>;
        };

        td_slash: td_slash {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SLASH";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp SLASH>,
                <&kp BACKSLASH>;
        };

        td_astrk: td_astrk {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ASTRK";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp ASTRK>,
                <&kp HASH>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;
        };

        au: auto_umlauts {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESC  &kp Q             &kp W             &kp E          &kp R               &kp T    &kp Y  &kp U               &kp I          &kp O              &kp P                 &kp BSPC
&kp TAB  &kp A             &kp S             &kp D          &kp F               &kp G    &kp H  &kp J               &kp K          &kp L              &kp SEMI              &kp APOS
&lt 5 LALT    &hm LCTRL Z       &hm LCMD X        &kp C          &kp V               &kp B    &kp N  &kp M               &kp COMMA      &hm LCMD DOT       &hm LCTRL SLASH       &lt 5 LALT
                                             &lt 3          &lt 1 SPACE    &kp LSHIFT    &mt LC(LS(LALT)) BSPC      &lt 2 ENTER
            >;
        };

        layer_1 {
            bindings = <
&trans  &td_excl        &kp AT          &kp DOLLAR       &td_astrk  &td_bkt     &kp N0           &kp N1         &kp N2      &kp N3  &td_dot     &kp F1
&trans  &hm LCTRL AMPS  &hm LCMD UNDER  &hm LSHFT MINUS  &td_qt     &td_par     &kp PLUS         &kp N4         &kp N5      &kp N6  &kp COLON   &kp F10
&trans  &kp PIPE        &kp PRCNT       &kp CARET        &td_grave  &td_brc     &kp EQUAL        &kp N7         &kp N8      &kp N9  &td_slash   &kp F20
                                        &none            &kp BSPC   &kp LSHFT   &mt LC(LS(LALT)) BSPC           &to L3
            >;
        };

        layer_2 {
            bindings = <
&trans      &none       &kp LC(LA(N1))  &kp LBKT  &kp RBKT  &none            &none      &none         &none       &none         &none  &kp DEL
&trans      &kp LCTRL   &kp LC(LA(N4))  &kp LPAR  &kp RPAR  &none            &kp LEFT   &kp DOWN      &kp UP      &kp RIGHT     &none  &kp GRAVE
&trans      &none       &kp LC(LA(N7))  &kp LBRC  &kp RBRC  &none            &none      &none         &none       &none         &none  &kp TILDE
                                        &trans    &kp BSPC  &mo LSHFT        &kp SPACE  &to L0
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans   &kp F1  &kp F2         &kp F3        &trans         &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4  &kp C_VOLUME_UP
&trans  &trans   &kp F5  &mkp MCLK      &mkp LCLK     &mkp RCLK      &out OUT_TOG  &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE    &kp C_VOLUME_DOWN
&trans  &trans   &kp F9  &kp F10        &kp F11       &trans         &trans        &trans            &trans             &trans           &trans        &kp C_MUTE
                         &trans         &to L0         &trans         &trans         &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans     &trans     &trans          &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
