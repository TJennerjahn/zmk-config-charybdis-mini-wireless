#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define U_TAPPING_TERM 200

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    
    macros {
        excl_eq: excl_eq {
            label = "EXCL_EQ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
        };

    };
    combos {
        compatible = "zmk,combos";

        LeftClickRight {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        RightClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
        };

        MiddleClickRight {
            bindings = <&mkp MCLK>;
            key-positions = <21 22>;
        };

        escape_key {
            timeout-ms = <20>;
            key-positions = <12 13>;
            bindings = <&kp ESC>;
        };

        tab_key {
            timeout-ms = <20>;
            key-positions = <17 18>;
            bindings = <&kp TAB>;
        };

        lock_screen {
            timeout-ms = <20>;
            key-positions = <27 28>;
            bindings = <&kp LC(LG(Q))>;
            layers = <0>;
        };
    };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        td_bkt: tap_dance_bkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BKT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LBKT>,
                <&kp RBKT>;
        };

        td_par: tap_dance_par {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PAR";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LPAR>,
                <&kp RPAR>;
        };

        td_brc: tap_dance_brc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BRC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LBRC>,
                <&kp RBRC>;
        };

        td_qt: tap_dance_qt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_QT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&hm LALT SQT>,
                <&kp DQT>;
        };

        td_excl: tap_dance_excl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EXCL";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp EXCL>,
                <&excl_eq>;
        };

        td_dot: td_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DOT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp DOT>,
                <&kp COMMA>;
        };

        td_slash: td_slash {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SLASH";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp SLASH>,
                <&kp BACKSLASH>;
        };

        td_astrk: td_astrk {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ASTRK";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp ASTRK>,
                <&kp HASH>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;
        };

        au: auto_umlauts {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESC  &kp Q             &kp W             &kp E          &kp R               &kp T    &kp Y  AU(U)               &kp I          AU(O)              &kp P                 &kp BSPC
&kp TAB  AU(A)             AU(S)             &kp D          &kp F               &kp G    &kp H  &kp J               &kp K          &kp L              &kp SEMI              &kp APOS
&mo 5    &kp Z             &kp X             &kp C          &kp V               &kp B    &kp N  &kp M               &kp COMMA      &hm LCMD DT        &hm LCTRL SLASH       &mo 5
                                             &lt 1 SPACE    &kp LSHIFT          &none    &mt LT(LS(LALT)) BSPC  &lt 2 ENTER
            >;
        };

        layer_1 {
            bindings = <
&trans  &td_excl        &kp AT          &kp DOLLAR       &td_astrk  &td_bkt     &kp N0           &kp N1         &kp N2          &kp N3  &td_dot   &kp F1
&trans  &hm LCTRL AMPS  &hm LCMD UNDER  &hm LSHFT MINUS  &td_qt     &td_par     &kp PLUS         &kp N4         &kp N5          &kp N6  &kp COLON &kp F10
&trans  &kp PIPE        &kp PRCNT       &kp CARET        &td_grave  &td_brc     &kp EQUAL        &kp N7         &kp N8          &kp N9  &td_slash &kp F20
                                        &kp BSPC         &kp LSHFT  &trans      &mt LC(LS(LALT)) BSPC  &to L3
            >;
        };

        SYMNUM {
            bindings = <
&bt BT_CLR  &kp EXCL      &kp AT       &kp HASH    &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS                 &kp KP_MULTIPLY   &kp LPAR              &kp RPAR              &kp DEL
&trans      &trans        &bt BT_PRV   &bt BT_NXT  &trans    &trans       &kp UNDER  &u_mt RIGHT_SHIFT EQUAL  &u_mt RCTRL LBKT  &u_mt RIGHT_ALT RBKT  &u_mt RIGHT_GUI BSLH  &kp GRAVE
&trans      &out OUT_TOG  &bootloader  &trans      &trans    &trans       &kp MINUS  &kp PLUS                 &kp LBRC          &kp RBRC              &kp PIPE              &kp TILDE
                                       &trans      &trans    &mo 3        &trans     &trans
            >;
        };

        FUN {
            bindings = <
&trans  &trans   &kp F1  &kp F2   &kp F3   &kp F4     &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
&trans  &kp DEL  &kp F5  &kp F6   &kp F7   &kp F8     &out OUT_TOG  &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE    &kp LALT
&trans  &trans   &kp F9  &kp F10  &kp F11  &kp F12    &trans        &trans            &trans             &trans           &trans        &to 0
                         &trans   &trans   &trans     &trans        &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
